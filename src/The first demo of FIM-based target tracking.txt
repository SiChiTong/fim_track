The first demo of FIM-based target tracking.

Local Path Tracking Algorithm: TurnAndGo

Global Path Planning: Simulated FIM gradient ascent, with constant step size.

Location Estimation Algorithm: The closest one in multi-lateration and EKF's prediction to intersection method's prediction

3 Mobile Sensors, 1 static target situated at (0,0).

Initial guess for the location estimation algorithms: (0.5,0.5)

Global Path replanning frequency: 1Hz

Time interval between two consecutive waypoints: 1s.

Global path timesteps = 50.

Initial poses of mobile sensors:

sensor_poses=[[4,0,0,np.pi],\
	[4,0.5,0,np.pi],\
	[4,-0.5,0,np.pi]]

np.pi means the robots are facing the negative dir of x-axis.	

Caveat: We need location_estimation.py, and that depends on jax library. So we need to activate the corresponding python library before running target_tracking_launch.py

The robots can find the target all right. The obvious improvement to be made is on local path tracking algorithm: a lot of meaningless circles are made as the robots gets closer to the target and the global path may become a bit unstable. 

Switching TurnAndGo with LQR may smoothen such behaviors.

Some extra notes: currently the virtual sensor readings are generated by noiseless measurements, and the location estimation algorithms have the perfect measurement coefficients. In the future, location estimation may be a bigger challenge than the local path tracking.